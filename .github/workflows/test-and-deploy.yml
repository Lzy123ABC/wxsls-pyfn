name: Test and gradual deploy serverless

on:
  pull_request:
  push:
    paths-ignore:
      - "**.md"
      - serverless.yml

env:
  SERVERLESS_PLATFORM_VENDOR: tencent
  TENCENT_SECRET_ID: ${{ secrets.TENCENT_SECRET_ID }}
  TENCENT_SECRET_KEY: ${{ secrets.TENCENT_SECRET_KEY }}

jobs:
  deploy:
    name: test and deploy serverless
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.6
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.1.5
      - name: Install serverless
        run: sudo npm install -g serverless
      - name: Determine env
        id: env
        run: |
          if [ $GITHUB_REF == 'refs/heads/master' ]; then
            echo '::set-output name=stage::prod'
            echo '::set-output name=dynaconf_env::production'
          else
            echo '::set-output name=stage::dev'
            echo '::set-output name=dynaconf_env::development'
          fi
      - name: Get poetry paths
        id: poetry-path
        run: |
          echo "::set-output name=cache-dir::$(poetry config cache-dir)"
          poetry run python -c "from distutils.sysconfig import get_python_lib;print('::set-output name=lib-dir::' + get_python_lib())"
      - name: Cache Poetry
        uses: actions/cache@v2.1.4
        id: cache
        with:
          path: ${{ steps.poetry-path.outputs.cache-dir }}
          key: poetry-cache-v1-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            poetry-cache-v1-
      - name: Install and update layer
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          poetry install --no-root
          sls deploy --target layer
        env:
          LAYER_SRC: ${{ steps.poetry-path.outputs.lib-dir }}
          STAGE: ${{ steps.env.outputs.stage }}
      - name: Run test
        run: poetry run pytest
      - name: Dump secrets
        run: echo $SECRETS | base64 --decode > src/pkuphysu_wechat/config/.secrets.toml
        env:
          SECRETS: ${{ secrets.SECRET_SETTING }}
      - name: Deploy serverless
        run: |
          output=`sls deploy --target src | grep -v -e Initializing -e Uploading -e Deploying -e NA | tee /dev/stderr`
          if [[ $output =~ '请检查该实例是否创建成功' ||  $output =~ 'was not found' ]]; then
            sls deploy | grep -v -e Initializing -e Uploading -e Deploying -e NA # Retry deploying all components
          elif [[ $output =~ '帮助文档' ]]; then # Unknown error
            exit 2
          fi
        env:
          STAGE: ${{ steps.env.outputs.stage }}
          LAYER_SRC: ${{ steps.poetry-path.outputs.lib-dir }}
          DYNACONF_ENV: ${{ steps.env.outputs.dynaconf_env}}
